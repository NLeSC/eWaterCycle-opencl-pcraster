<chapter id="secdyn">
<title>Dynamic modelling</title>
<section id="secdynint">
<title>Introduction</title>
<para>
Dynamic modelling is modelling of processes over time. In dynamic
modelling new attributes are computed as a function of attribute changes
over time. After the general concepts (<xref linkend="secseqcon"/>) are explained,
each part of the script will be described, from the structure in the seperate sections of the program (script) for a dynamic model (<xref linkend="secseqscr"/> to 
some special contents of a dynamic modelling script (timeinput,
report) and the running of a script (<xref linkend="secseqbla"/>). Finally, some examples of dynamic models are given (<xref linkend="secseqhow"/>).
</para>

<section id="secseqcon">
<title>Concepts</title>
<section id="secseqconint">
<title>Introduction</title>
<para>
In a dynamic model, for each timestep a series of <pcr-op>pcrcalc</pcr-op>
operations is consecutively performed using the resulting maps from the
previous timestep and/or external data that define the value of an
attribute for that timestep. This is done for all timesteps of a model
run. Thus a dynamic model can be seen as a temporal sequence
of static changes in the state of cells on map(s), each representing the
change in the state of the modelled process over the timestep.
</para>

<para>
In the PCRaster database, the <emphasis>time series</emphasis> covers
spatial data that vary over time. For each time step, it contains a
set of map cell values that is input or output at that timestep. The format of 
time series will be described later on (<xref
linkend="secdatbasetime"/>). Other data
used in Dynamic Modelling are the same as used for Cartographic Modelling:
the <emphasis>PCRaster map</emphasis> and the <pcr-op>table</pcr-op>. In a
dynamic model a PCRaster map is a variable that may have a different set
of cell values for each time step: it is a map that changes in time. A
table is used in dynamic modelling to define certain relations between
maps. The table must be available in the PCRaster database before a model
is run; a table cannot be changed or generated during a model run. The general 
concept and format of the time series, the PCRaster map en the table has been dicussed earlier (<xref linkend="secdatbase"/>).
</para>
</section>


<section id="secseqconsec">
<title>The sections of a script</title>
<para>
Dynamic models are built with the language provided by PCRaster. Within
this language the models can be programmed with the PCRaster
operators of Cartographic Modelling. A <emphasis>script</emphasis>,
which is a program written in the Dynamic Modelling language,
consists of separate <emphasis>sections</emphasis>. Each section
contains a certain functional part of the script. The division in
sections is an essential concept of the Dynamic Modelling language.
It tells the computer how to execute a program and it helps the user
to structure the components of a model. The basic sections needed
for building a model are the <emphasis>binding</emphasis> section,
<emphasis>areamap</emphasis> section, <emphasis>timer</emphasis> section,
<emphasis>initial</emphasis> section and the <emphasis>dynamic</emphasis>
section. The Table below gives an example of a script for
the simulation of the soil water balance. Here, you do not need to
know the exact function of the model; it is only given as an idea of
a script. The detailed description of the example in the Table will be discussed later on in this chapter (<xref linkend="secseqhow"/>).
</para>

<para>
<example>
 <title> Example of a dynamic model.</title>
<literallayout>
# model for calculation of reduction in soil moisture content
# incorporated processes: evapotranspiration and infiltration of rain
# timestep one day

binding
 MoistMeas = Moist952.map;
 MoistCrit = scalar(20);
 Eref = scalar(8);
 Kc = CrCoef95.map;
 TimeSeriesMax = Max8.tss;
 TimeSeriesMin = Min8.tss;
 RainTimeSeries = Rain.tss;

areamap
 Clone.map;

timer
 1 30 1;

initial
 report Eact = Kc * Eref;
 Moist = MoistMeas;

dynamic
 Rain = timeinputscalar(RainTimeSeries, 1);
 report Moist = Moist + Rain - Eact;
 MoistBelowCritial = Moist le MoistCrit;
 report TimeSeriesMax = mapmaximum(Moist);
 report TimeSeriesMin = mapminimum(Moist);
                                            # reports to a time series
</literallayout>
</example>

<xref linkend="figseqfig"/> gives a conceptual picture of a 
Dynamic Model and its sections. The binding and areamap sections
regulate the database management of the files used throughout the
program.  In principle, files mentioned in the Dynamic Modelling script
are linked directly to those of the PCRaster database: the names used in
the Dynamic Modelling script correspond with those of the database. The
binding section defines a different names in the script:
it binds the database file names to the names of a variable in the model.

<figure id="figseqfig"><!--float="1"-->
<title>Schematic representation of a dynamic model.</title>
<graphic fileref="figures/seqconc.png" format="PNG" />
</figure>


The areamap section defines the model area and modelling resolution.
A clone map specifies the geographical location attributes of the maps
used throughout the program. All maps used or generated by the model
have the location attributes of the clone map in the areamap section. 
</para>

<para>
The timer section controls the time dimension of the model. It
specifies the duration of a model run by setting the time at the start
(<emphasis>t</emphasis>(start)) and end (<emphasis>t</emphasis>(end))
of a model run. Additionally it specifies the time slice
(d<emphasis>t</emphasis>) of the timestep. The number of timesteps of
the model is the duration of the model run divided by the timeslice.
</para>

<para>
Spatial (maps) or non spatial attribute values at the start of the model
run are given in the initial section. These values may be defined by
one or more <pcr-op>pcrcalc</pcr-op> operations. The initial section
can be seen as a static Cartographic Modelling script which sets the
initial attribute values used at the start of the dynamic section,
for the iteration at the first timestep.
</para>

<para>
For each timestep <emphasis>i</emphasis>, the dynamic section
defines the operations that result in the (map) values for
timestep <emphasis>i</emphasis>.  It is an iterative section that is
repeated each timestep. The dynamic section consists of one or more
<pcr-op>pcrcalc</pcr-op> operations that are performed sequentially each
timestep. At the first timestep (<emphasis>i</emphasis> = 1), the dynamic
section is run using the results from the initial section. The values that
result from running the dynamic section at the first timestep are called
the (map) values at timestep 1. The second timestep is run, starting with
the results of timestep 1. These values are used for running the dynamic
section at the third timestep (<emphasis>i</emphasis> = 3), etc. Thus,
the operations performed during a timestep act upon the expressions that
result from running the dynamic section at the previous timestep or upon
an expression value that is the same for each timestep.
</para>
</section>


<section id="secseqcontim">
<title>Timeinput: retrieving dynamic data from the database</title>
<para>
For each timestep, timeinput assigns a new set of map values to an
expression that is used in the dynamic section. Timeinput allows the
import of specified data to the dynamic section at each timestep,
irrespective of the results of the previous timestep: it defines an
expression that is assigned a different set of cell values for each
timestep. Each timestep, timeinput queries the database for a set of
cell values especially meant for that timestep and assigns these to the
expression.  
</para>

<para>
Timeinput is done with a timeinput <pcr-op>pcrcalc</pcr-op> operation in the script.
This is described in <xref linkend="secseqintime"/>.
</para>
</section>


<section id="secseqconrep">
<title>Reporting: storing dynamic data in the database</title>
<para>
Reporting means storing model results in the PCRaster database. Both the
results of an operation in the initial or in the dynamic section can be
stored in the PCRaster database. If results of the dynamic section are
reported, the results are stored in the database for each timestep. This
can be done in two ways. First, the result of a <pcr-op>pcrcalc</pcr-op>
operation can be stored in the database as a set of maps, where each map
gives the values for a different timestep. Second, a time series can be
used to report results: each timestep, the cell values of a given set
of cells are written to a time series file.
</para>

<para>
Reporting of results is done with the <pcr-keyword>report</pcr-keyword>
keyword. The use of this keyword in the script is given in <xref
linkend="secseqinreport"/>.  
</para>
</section>
</section>


<section id="secseqscr">
<title>The script</title>
<section id="secseqscrint">
<title>Introduction, layout of the script</title>
<para>
This <xref linkend="secseqscr"/> describes the structure of a Dynamic
Modelling script and its contents. The script is an ordinary ascii
text file; an example was given in a Table in the beginning of this chapter.
A script consists of separate sections, each
with a defined function in the model. A dynamic model script contains
the sections binding, areamap, timer, initial and dynamic; in this
order. Each section starts with the <emphasis>section keyword</emphasis>
<anchor id="KeywordSection" role="indexterm-concept"/> 
<indexterm role="concept">
<primary>section keyword</primary>
</indexterm>
of the section.
The section keyword is followed by
one or more <emphasis>statements</emphasis>  
<anchor id="KeywordStatement" role="indexterm-concept"  /> 
<indexterm role="concept">
<primary>statement</primary>
</indexterm>
that give the
content of the section. Each statement is terminated by a semicolon
(;) sign.
</para>

<para>
In principle, white space characters (spaces, empty lines) can be used
anywhere in the script: all white space characters are ignored during
execution of the script. For a structured script, we advise users to type
the section keywords and the statements on separate lines. Remarks about
the contents of the script are typed after a # character: everything
typed on a line after this character is ignored and has no effect on
the function of the model.
</para>

<para>
A statement in a section may contain <emphasis>keywords</emphasis>, names
of variables, or numbers. Keywords are defined by the PCRaster Dynamic
Modelling language and have a special meaning in the language. For
instance the section keyword defines the start of a section in the
script. Other keywords in a script are the PCRaster operators and for
instance the <pcr-keyword>report</pcr-keyword> keyword. Keywords must
always be typed in lowercase characters. Unlike a keyword, the name
of a variable is chosen by the user. It may be the name of a PCRaster
expression (a map or a non spatial value) or the name of a table or
time series. To distinguish between keywords and names of variables,
we strongly recommend that the name of a variable always begins with an
uppercase character.
</para>
</section>


<section id="secseqscrbind">
<title>Binding section</title>
<para>
In principle, if a variable is not mentioned in the binding section,
the variable name in the script is directly linked to the corresponding
file name in the PCRaster database: the file in the database that is used
or generated during a model run has a corresponding name in the script
and in the database.  The binding section, identified by the section
keyword <pcr-keyword>binding</pcr-keyword>, allows one to use a name for
a variable in the script that is different from the file name of that
variable in the database. This is because you probably may want to run a
program a number of times, each time with a different set of data files
and with a different set of resulting files. In most cases, these data
files are used a large number of times throughout the program. Using the
binding, you need only fill in the names of the files you want to use as
input names and output names for the model run in the binding section,
without changing all the file names in the rest of the program. Both file
names used as input files for the model and names that are stored in the
database during a model run with the <pcr-keyword>report</pcr-keyword>
keyword may be given in the binding section. 
<!-- OBSOLOTE
If the PCRaster MS-Windows version
is used, an additional advantage of the binding section is that it allows
one to get round the MS-Windows rules for filenames (format 8.3: xxxxxxxx.xxx)
in the script: the unpractical MS-Windows names with a dot can be replaced by
model names which may be as long as you want, with or without a dot.
-->
</para>

<para>
In the binding section, the name of a file in the database is bound
(linked) to its name in the model with the following statement:

<informalexample><literallayout><emphasis>NameInModel</emphasis> =
<emphasis>DatabaseFilename</emphasis>;</literallayout></informalexample>

where <emphasis>DatabaseFilename</emphasis> is the file name under
which the variable is available in the database or will be stored to
the database and <emphasis>NameInModel</emphasis> is the name used for
the variable throughout the script.
</para>

<para>
Alternatively, a constant value can be assigned to a variable with the
statement. This applies only if ModelName is a PCRaster map which is
input to the model:

<informalexample><literallayout><emphasis>NameInModel</emphasis> =
value;</literallayout></informalexample>

where value is a number; <emphasis>NameInModel</emphasis> has this
value throughout the program: its value cannot be changed in one of
the other sections. It has no data type attached to it. Attaching a
data type to the PCRaster map <emphasis>NameInModel</emphasis> with
a constant value can be done using one of the data type assignment
operators (<pcr-op>boolean</pcr-op>, <pcr-op>nominal</pcr-op>,
<pcr-op>ordinal</pcr-op>, <pcr-op>scalar</pcr-op>,
<pcr-op>directional</pcr-op>, <pcr-op>ldd</pcr-op>). An example which
assigns a nominal data type to ClassMap is:

<programlisting>ClassMap = nominal(3);</programlisting>

The data type assignment operators are the only operations that can be
given in the binding section, other operators cannot be used.
</para>

<para>
Not all variable names need to be mentioned in the binding; as above said,
the filenames of the variables in the database can also be used directly in
the script. If no variable names are bound at all, the section may be
omitted from the model script.
</para>
</section>


<section id="secseqscrarea">
<title>Areamap section</title>
<para>
The section keyword <pcr-keyword>areamap</pcr-keyword> defines the areamap section. It
contains one statement: the name of a map which is used as clone map in
the model, followed by a semi colon. This map may contain any kind of
data; only its location attributes are of importance. All maps that are
generated during a model run have the location attributes of the clone map.
Also, all maps that are used as input to the model must have location
attributes which correspond with the map in the areamap section.
</para>
</section>


<section id="secseqscrtime">
<title>Timer section</title>
<para>
The timer section, identified by the section keyword
<pcr-keyword>timer</pcr-keyword>, gives the time dimension of the
model. It contains one statement, consisting of three values:

<informalexample><literallayout>starttime endtime
timeslice;</literallayout></informalexample>

The iterative part of the model is run between the starttime and the
endtime. The timeslice defines the time between the consecutive timesteps.
</para>

<para>
This version of the Dynamic Modelling module of PCRaster imposes
restrictions on the time dimension of a model. The starttime and timeslice
cannot be chosen by the user and must always be 1. Only the endtime can
be chosen, it must be a whole number larger than 1.
</para>
</section>


<section id="secseqscrini">
<title>Initial section</title>
<para>
The initial section, identified by the section keyword
<pcr-keyword>initial</pcr-keyword>, is meant to prepare the set of input
variables which are needed to run the dynamic section at timestep 1,
the first time that the dynamic section is run.
</para>

<para>
The initial section can be compared with a Cartographic Modelling script.
It contains a set of <pcr-op>pcrcalc</pcr-op> operations which are performed
consecutively, from top to bottom in the section. Each line contains a
<pcr-op>pcrcalc</pcr-op> operation and is concluded with a semi colon (;) sign. The
resulting variables of the initial section are the initial values that are used
as input variables for running the dynamic section at timestep 1.
</para>

<para>
It may be that initial variables (maps for instance) for running the
dynamic section at timestep 1 are already present in the PCRaster
database. These do not need to be generated or changed in the
initial section and can directly be used in the dynamic section,
because they already have the correct value. On the other hand,
<emphasis>all</emphasis> variables that are needed as input for running
the dynamic section for the first time must either be defined in the
initial section or must be already present in the database. This holds
also for variables that have an initial value 0.
</para>

<para>
If the initial section is not needed to define the initial values of the
variables it can be omitted from the script.
</para>
</section>


<section id="secseqscrdyn">
<title>Dynamic section</title>
<para>
The dynamic section, identified by the section keyword
<pcr-keyword>dynamic</pcr-keyword>, contains <pcr-op>pcrcalc</pcr-op>
operations that are performed at each timestep <emphasis>i</emphasis>. The
operations are sequentially performed from top to bottom in the section.
Each line gives a <pcr-op>pcrcalc</pcr-op> operation and is concluded
with a semicolon (;) sign. At the start of running the dynamic at
timestep <emphasis>i</emphasis>, variables have the value that results
from running the dynamic at timestep <emphasis>i</emphasis> -

1. These values are used as input values for running the dynamic at
timestep <emphasis>i</emphasis>. The values of the variables at the
end of running the dynamic section at timestep <emphasis>i</emphasis>
are the input values for running the dynamic section at timestep
<emphasis>i</emphasis> + 1.
</para>
</section>
</section>


<section id="secseqbla">
<title>Timeinput and report in the script, running a script</title>
<section id="secseqin">
<title>Introduction</title>
<para>
This <xref linkend="secseqbla"/> describes the contents of a
script meant for timeinput of data (<xref linkend="secseqintime"/>)
and reporting results ( <xref linkend="secseqinreport"/>). The last section (<xref
linkend="secseqinrun"/>) describes how a script is run.
</para>
</section>


<section id="secseqintime">
<title>Operators for timeinput</title>
<para>
Two PCRaster operators perform a timeinput operation:
<pcr-op>timeinput</pcr-op> and <pcr-op>timeinput...</pcr-op>
(e.g. <pcr-op>timeinputboolean</pcr-op>,
<pcr-op>timeinputnominal</pcr-op>, etc.). These operations are used only
in the dynamic section. Like the other PCRaster operators, the timeinput
operators result in either a spatial or a non spatial expression. For
each timestep, timeinput assigns specified cell values to the resulting
expression, independent of the cell values at the previous timestep. The
assignment of a different set of cell values to the expression for each
timestep can be done in two ways:
</para>

<para>
The <pcr-op>timeinput</pcr-op> operator uses a set of maps in the
database: the database must contain a PCRaster map with a file name
extension referring to the timestep for which it is meant. The timeinput
operator assigns to the expression in the dynamic section each timestep
the map in the database with the extension referring to that timestep.
</para>

<para>
The <pcr-op>timeinput...</pcr-op> operators
(<pcr-op>timeinputboolean</pcr-op>, <pcr-op>timeinputnominal</pcr-op>,
<pcr-op>timeinputordinal</pcr-op>, <pcr-op>timeinputscalar</pcr-op>,
<pcr-op>timeinputdirectional</pcr-op> and <pcr-op>timeinputldd</pcr-op>)
use a time series. The time series is linked to a given expression with
unique identifier cell values. For each timestep, the time series gives
cell values for these unique identifiers. These cell values are assigned
to the timeinput expression in the dynamic section on basis of the unique
identifiers on the unique identifier expression.
</para>

<para>
For a detailed description of the timeinput operations, see
<link linkend="timeinput"><pcr-op>timeinput</pcr-op></link> and
<link linkend="timeinput..."><pcr-op>timeinput...</pcr-op></link>.
<xref linkend="secdatbasetimeform"/> gives the format of time series.
</para>
</section>


<section id="secseqinreport">
<title>report keyword; and the timeoutput operator</title>
<para>
The <pcr-keyword>report</pcr-keyword> keyword stores the result
(which is always on the left hand side) of a <pcr-op>pcrcalc</pcr-op>
operation to the database. Reporting is done by typing the keyword
<pcr-keyword>report</pcr-keyword> before a <pcr-op>pcrcalc</pcr-op>
operation:

<informalexample><literallayout><pcr-keyword>report</pcr-keyword>
<emphasis>VariableName</emphasis> = <pcr-op>pcrcalc</pcr-op>
operation;</literallayout></informalexample>

for instance:

<programlisting>report NOStdDev = sqrt(NOVariance); </programlisting>

has the effect that the result (NOStdDev) of the <pcr-op>pcrcalc</pcr-op> operation is
stored to the database. In a script, a VariableName cannot be used for report more
than once.
</para>

<para>
The <pcr-keyword>report</pcr-keyword> keyword has no effect on the
<pcr-op>pcrcalc</pcr-op> operation that is done, the only effect of
<pcr-keyword>report</pcr-keyword> is that it stores the result of
the operation in addition to computing it. If results of the iterative
dynamic section are reported, the results are stored in the database for
each timestep.  The model results for each timestep can be reported in
two different ways; the sort of report that is made depends on the sort
of operation that is prefaced with the <pcr-keyword>report</pcr-keyword>
keyword.
</para>

<para>
First, the results of an ordinary <pcr-op>pcrcalc</pcr-op> operation
can be reported. If the result of the operation preceded with the
<pcr-keyword>report</pcr-keyword> keyword is a map, each timestep
the whole map is stored in the database with a filename that refers
to the timestep under consideration. The file names of these maps in
the database consist of two parts: the suffix and an extension. The
suffix corresponds to the name of the variable that is prefaced by the
<pcr-keyword>report</pcr-keyword> keyword. The suffix is followed by
the time extension which corresponds with the time of the timestep
at which the map is generated.  The filename has a format that
corresponds with the historic MS-DOS rules for filenames: 8 characters, a dot
and 3 characters. This is best illustrated by an example. Imagine
a model with starttime <emphasis>t</emphasis>(1) = 1, endtime
<emphasis>t</emphasis>(<emphasis>i</emphasis>= <emphasis>i</emphasis>end)
= 1200 and timeslice d<emphasis>t</emphasis> = 1. In the dynamic section,
the statement

<programlisting> report Snow = Snowfall * 2; </programlisting>

stores 1200 maps in the database with filenames Snow0000.001,
Snow0000.002,...Snow0001.199, Snow0001.200. If this statement were
put in the initial section only one map is stored in the database with filename
Snow. Remember that it is not possible to report variable name Snow more
than once: both in the initial and in the dynamic section. 
</para>

<para>
Maps stored in the database with the <pcr-keyword>report</pcr-keyword>
keyword have the filename format which is also needed for the
<link linkend="timeinput"><pcr-op>timeinput</pcr-op> operation</link>.
</para>

<para>
If the result of the <pcr-op>pcrcalc</pcr-op> operation which is reported
is a non spatial value it is automatically stored as a time series. At
the end of the model run, the time series will contain the resulting
non spatial value for each timestep.
</para>

<para>
The second way in which a report can be made is reporting results
of a <pcr-op>pcrcalc</pcr-op> operation especially meant for
reporting: the <pcr-op>timeoutput</pcr-op> operator. This operators
always create a time series and must always be prefaced with the
<pcr-keyword>report</pcr-keyword> keyword. They are only used in the
iterative dynamic section.  The <pcr-op>timeoutput</pcr-op> operator
reports cell values of a specified cell or cells of an expression to a
time series in the database.  The result of one <link linkend="secmapop">map operation </link> resulting in a non spatial value 
is <pcr-keyword>always</pcr-keyword> written to a time series.
It is meant to report statistics of a map for each timestep.  <xref
linkend="secdatbasetimeform"/> gives the format of time series.  
</para>
</section>


<section id="secseqinrun">
<title>Running a script</title>
<para>
A Dynamic Modelling script is run in PCRaster by typing:

<informalexample><literallayout><pcr-op>pcrcalc</pcr-op> -f
<emphasis>NameOfModel</emphasis></literallayout></informalexample>

where <emphasis>NameOfModel</emphasis> is the file name of the ascii formatted model
script.
</para>
</section>
</section>


<section id="secseqhow">
<title>How to make a dynamic model</title>
<section id="secseqhowint">
<title>The soil moisture model with evapotranspiration</title>
<para>
This following sections give some examples of a Dynamic Modelling script. We describe how
the change in soil moisture content as a result of precipitation
and evapotranspiration can be modelled using the PCRaster Dynamic
Modelling language. In this section, we start with a script for a
simplified model, without rain during a model run. The next section (<xref
linkend="secseqhowtime"/>) describes a somewhat more complicated model,
incorporating rain modelled with a timeinput operation.  </para> 

<para>
Evapotranspiration is the combined water loss to the atmosphere by
evaporation from the soil and transpiration from plants. The actual
evapotranspiration <emphasis>E</emphasis>act (mm/day) from a crop can be calculated
with the relation (<xref linkend="chow88" role="bibRef"/>):

<informalexample><literallayout><emphasis>E</emphasis>act =
<emphasis>k</emphasis>s x <emphasis>k</emphasis>cx 
<emphasis>E</emphasis>ref
(1)</literallayout></informalexample>

where <emphasis>E</emphasis>ref (mm/day) is the reference crop
evapotranspiration of a specified green grass surface with a soil
not short of water. <emphasis>E</emphasis>ref depends on the weather
conditions during the day; for the sake of simplicity it is assumed
to be constant. The soil coefficient <emphasis>k</emphasis>s (0 =&lt;
<emphasis>k</emphasis>s =&lt; 1) mainly depends on the soil water content
of the soil and is also assumed to be one: the soil is not short of
water. The crop coefficient <emphasis>k</emphasis>c depends on the
sort of crop and may have a value of 0.2 for almost bare ground up to
1.3 for vegetation that transpires at a great rate, such as corn. It
is assumed that a map is available with the crop coefficient values,
recoded from a land use map. So, the model assumes a temporarily constant
evapotranspiration which for each day is given by:

<informalexample><literallayout><emphasis>E</emphasis>act =
<emphasis>k</emphasis>c x <emphasis>E</emphasis>ref (mm/day)
(2)</literallayout></informalexample>

As a result of evapotranspiration the soil moisture content (mm) decreases.
For simplicity, it is assumed here that evapotranspiration is the only
flow that changes the soil moisture content. No other flows, such as
infiltrating rain or percolation to the deeper groundwater occur.
<xref linkend="figsoilmoistfig1"/> gives the change with time, with a timestep
of 1 day, in the soil moisture content at a gridcell according to this
concept. This Figure also shows the critical moisture content which is the
moisture content value below which shortage in soil moisture may occur.

<figure id="figsoilmoistfig1"><!--float="1"-->
<title>Change of Soil moisture content (mm) with time, timestep one
day. Included process: evapotranspiration. MoistInit: moisture content at
start of model run (mm); MoistCrit: critical moisture content (mm);
<emphasis>E</emphasis>act: actual evapotranspiration (mm/day).</title>
<graphic fileref="figures/dynvb1.png" format="PNG" />
</figure>
</para>

<para>
Now let's make a model for the process described above and shown
in the <xref linkend="figsoilmoistfig1"/>. Inputs for such a model are
maps containing for each cell the initial moisture content and the
critical moisture content. Additionally, in order to calculate the actual
evapotranspiration a map with the crop coefficients for each cell and one
constant value of the reference crop evapotranspiration is needed. The
model must calculate (with equation (2)) and store in the database for
each timestep a map with the moisture content at that timestep. Here we
also assume that the model builder wants to know for each timestep the
maximum moisture content in the study area and the area of land that has a
moisture content below the critical value. Table 2 (below)
gives the script for such a model. Two maps already present in the
database are bound to the model names MoistMeas and Kc. Respectively,
these are Moist952.map which contains measured moisture contents, which
may be based upon an interpolation of field measurements, and CrCoef95.map
which contains the crop coefficient value for each cell. The MoistCrit is
the critical moisture content which is assumed to have a constant value
of 20 mm over the study area. The reference crop evapotranspiration
(modelname Eref) has a constant value of 8 mm/day. The binding also
gives the file name under which the output time series TimeSeriesMin and
TimeSeriesMax (defined in the dynamic section) is stored to the database.
</para>

<para>
<example>
<title>Dynamic modelling script for change in soil moisture content; included
process evapotranspiration.</title>
<literallayout>
# model for calculation of reduction in soil moisture content
# incorporated processes: evapotranspiration
# timestep one day

binding
 MoistMeas = Moist952.map;   # measured moisture content (mm)
 MoistCrit = scalar(20);     # critical moisture content (mm)
 Eref = scalar(8);           # reference crop evapotranspiration (ETPrc)
                             # mm/day
 Kc = CrCoef95.map;          # crop coefficient map
 TimeSeriesMax = Max8.tss;    # time series binding
 TimeSeriesMin = Min8.tss;    # time series binding

areamap
 Clone.map;                  # clone map with location attributes of maps
                             # used in model

timer
 1 30 1;                     # starttime: 1 (first day) 
                             # endtime: 30 (thirtiest day)
                             # timeslice 1 day
                             # as a result 30 timesteps (iterations)

initial
 report Eact = Kc * Eref;    # actual evapotranspiration (mm)
 Moist = MoistMeas;          # initial moisture content is measured
                             # moisture content (mm)

dynamic
 report Moist = Moist - Eact;               # moisture content (mm)
 MoistBelowCrit = Moist le MoistCrit;       # results in boolean map
 report TimeSeriesMax = mapmaximum(Moist);
 report TimeSeriesMin = mapminimum(Moist);
                                            # reports to a time series
</literallayout>
</example>

All maps used in the model must have the same location attributes. The
areamap section defines a map with these location attributes. Here it is
the map Clone.map, available under that name in the PCRaster database.
</para>

<para>
The timer sets the model time. The model starts at time = 1 and ends at
time = 30, with a timestep of 1. As a result it consists of 30 timesteps
which represent 30 days of evapotranspiration. The starttime is 1, so the
results of running the dynamic section for the first time, at the first timestep, are
stored with time extension 1.
</para>

<para>
The initial section defines the initial moisture contents at the start of the
model run: these are assumed to be the measured moisture contents
stored in the map MoistMeas. The actual evapotranspiration according to
equation (2) is also defined. It does not change during the model run, for
this reason it has been put in the initial section. It is also reported: the
initial moisture content is stored to the database under the name Moist. 
</para>

<para>
The dynamic section contains three <pcr-op>pcrcalc</pcr-op>
operations. For each timestep, first the moisture content for that
timestep is calculated, by subtracting the actual evapotranspiration
from the moisture content of the previous timestep. For each timestep,
the <pcr-keyword>report</pcr-keyword> keyword provides that the moisture
content is stored to the database. At the end of the model run, the
database will contain 30 moisture content maps. These have filename
extensions referring to the time of the timestep at which each map has
been generated. The resulting map of the first timestep at time = 1 is
stored under the name Moist000.001, the map of the second timestep at
time is 2 is stored as Moist000.002 etc. Remember that it would not be
possible to report also the operation Moist = MoistMeas; in the initial
section. That would result in a report of Moist which is made two times
in one model which is not allowed.
</para>

<para>
MoistBelowCrit is calculated in the second statement using the value for
Moist that results from the <pcr-op>pcrcalc</pcr-op> operation in the first statement.
MoistBelowCrit is a Boolean map that contains a Boolean TRUE (cell
value 1) for cells that have a moisture content equal to or below the
MoistCrit value and a Boolean FALSE for cells that still have a moisture
content larger than MoistCrit.
</para>

<para>
The third statement reports a timeseries with model name
TimeSeriesMax. Each timestep, the maximum cell value of the
map Moist is written to the time series. The binding section defines that
the table is stored under the file name Max8.tss. This is neatly done: for a
next run with a slightly changed model (for instance with a Eact value of
6), the user only needs to bind the TimeSeriesMax to a new filename,
for instance Max6.tss. In this way, it is relatively simple to run different
scenarios, each time only changing the values and filenames in the binding.
</para>
</section>

<section id="secseqhowtime">
<title>Soil moisture model with timeinput: rain</title>
<para>
Now, we build on the model given in the previous section by adding rain
to the soil during the 30 days of evapotranspiration. We assume that all
rain water immediately infiltrates in the soil. If the saturated soil
moisture content is reached as a result of rain water infiltration, the
remaining rain water is not added to the soil moisture anymore. This
excess in rain will run off. Here, the runoff process is not
incorporated in the model: it is assumed that the saturated moisture
content is not exceeded as a result of infiltrating rain.  The
evapotranspiration rate is assumed not to be influenced by the
infiltrating rain water. So no changes are made in the model with
respect to evapotranspiration. <xref linkend="figsoilmoistfig2"/> shows the
temporal change in soil moisture content as a result of
evapotranspiration and infiltrating rain.

<figure id="figsoilmoistfig2"><!--float="1"-->
<title>Change of Soil moisture content
 (mm) with time, timestep one day. Included process: evapotranspiration
and rain. MoistInit: moisture content at start of model run (mm);
MoistCrit: critical moisture content (mm); <emphasis>E</emphasis>act: actual
evapotranspiration (mm/day). Rain falls at time = 6 and 7 days.</title>
<graphic fileref="figures/dynvb2.png" format="PNG" />
</figure>

The model example below gives the sequential modelling script for evapotranspiration and
infiltration. The binding section gives the
model names for respectively the saturated soil moisture content map and
the time series with the rain in millimetres for each timestep. 
The table below gives the ascii formatted time series file
Rain.tss that is used.


<example>
<title>Dynamic modelling script. Included processes: evapotranspiration and infiltrating rain.</title> 
<literallayout>
# model for calculation of reduction in soil moisture content
# incorporated processes: evapotranspiration and infiltration of rain
# timestep one day

binding
 MoistMeas = Moist952.map;   # measured moisture content (mm)
 MoistCrit = scalar(20);     # critical moisture content (mm)
 Eref = scalar(8);           # reference crop evapotranspiration;
                             # (ETPrc) mm/day
 Kc = CrCoef95.map;          # crop coefficient map
 TimeSeriesMax = Max8.tss;   # time series binding
 TimeSeriesMin = Min8.tss;   # time series binding
 RainTimeSeries = Rain.tss;  # timeseries with amount of rain at each
                             # timestep (mm/day)

areamap
 Clone.map;                  # clone map with location attributes of maps
                             # used in model

timer
 1 30 1;                     # starttime: 1 (first day) 
                             # endtime: 30 (thirtiest day)
                             # timeslice 1 day; as a result
                             # 30 timesteps (iterations)

initial
 report Eact = Kc * Eref;    # actual evapotranspiration (mm)
 Moist = MoistMeas;          # initial moisture content is measured
                             # moisture content (mm)

dynamic
 Rain = timeinputscalar(RainTimeSeries, 1);
 report Moist = Moist + Rain - Eact;  # moisture content (mm)
 MoistBelowCrit = Moist le MoistCrit; # results in boolean map
 report TimeSeriesMax = mapmaximum(Moist);
 report TimeSeriesMin = mapminimum(Moist);
                             # reports to a time series
</literallayout>
</example>


In the first statement of the dynamic section, the <pcr-op>timeinputscalar</pcr-op>
operator reads the RainTimeSeries and assigns each timestep the amount
of rain to Rain. In the second statement, Rain is added to the soil moisture
Moist.
</para>

<para>
The remaining statements give the operations for the evapotranspiration
process and the report. These have not been changed compared to the
model given in the previous section.


<example>
<title> Time series Rain.tss: rain at the study site.  </title>
<literallayout>
Rain, 1-30 July 1995
2
time
rain (mm)
1      0.0
2      0.0
3      5.2
4      0.0
5      23.1
6      40.1
.
.
- lines for 7 to 28 not shown -
.
.
29     0.0
30     0.0
</literallayout>
</example>
</para>
</section>
</section>
</section>
 </chapter> 
 <!-- 
	  Local Variables:
	   mode: sgml
	   End
	   -->
